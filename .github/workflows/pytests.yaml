name: tests

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
        test: [mpi, quad, pace] #, eme, xyz, neme, spin]
        python-version: ["3.10"]
      max-parallel: 20
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Load Mac Env
      if: matrix.os == 'macos-latest'
      run: |
        brew install openmpi
        brew install cmake
    - name: Load Ubuntu Env
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt install -y openmpi-bin libopenmpi-dev
    - name: Install dependencies
      run: |
        python --version
        which python
        python -m pip install --upgrade setuptools pip wheel
        python -m pip install --upgrade numpy
        python -m pip install --upgrade pandas
        python -m pip install --upgrade tabulate
        python -m pip install --upgrade scipy
        python -m pip install --upgrade psutil
        python -m pip install --upgrade torch # for nonlinear
        python -m pip install --upgrade sympy # for ACE
        python -m pip install --upgrade pyyaml # for ACE
    - name: Lint with flake8
      run: |
        python -m pip install --upgrade flake8
        # stop the build if there are Python syntax errors or undefined names (actually ignoring F821 undefined names because of known flake8 bug)
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --ignore=F821
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Install LAMMPS
      shell: bash
      run: |
        which python
        # conda activate base
        cd ../

        # variables for git clone RPC error
        
        export GIT_TRACE_PACKET=1
        export GIT_TRACE=1
        export GIT_CURL_VERBOSE=1

        # increase postbuffer size

        git config --global http.version HTTP/1.1
        git config --global http.postBuffer 157286400

        # Procedure for installing our custom branch with compute pace:

        git clone -b compute-pace https://github.com/jmgoff/lammps_compute_PACE
        cd lammps_compute_PACE/cmake
        mkdir build && cd build
        # need to manually set CMAKE_OSX_DEPLOYMENT_TARGET to 10.15, needs to be changed/maintained as versions change
        cmake -DLAMMPS_EXCEPTIONS=yes \
              -DBUILD_SHARED_LIBS=yes \
              -DMLIAP_ENABLE_PYTHON=yes \
              -DPKG_PYTHON=yes \
              -DPKG_ML-SNAP=yes \
              -DPKG_ML-PACE=yes \
              -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 \
              -DPYTHON_EXECUTABLE:FILEPATH=`which python` ../
        git clone https://github.com/jmgoff/lammps-user-pace-1
        cp lammps-user-pace-1/ML-PACE/ace-evaluator/ace_evaluator.* ./lammps-user-pace-v.2022.10.15/ML-PACE/ace-evaluator/
        make -j 20
        make install-python
        #cd ../../../FitSNAP

        # Procedure for installing the standard LAMMPS develop branch:

        #git clone https://github.com/lammps/lammps.git
        #cd lammps/cmake
        #mkdir build
        #cd build
        # need to manually set CMAKE_OSX_DEPLOYMENT_TARGET to 10.15, needs to be changed/maintain as versions change
        # cmake -D PKG_ML-SNAP=yes -D PKG_SPIN=yes -D LAMMPS_EXCEPTIONS=yes -D BUILD_SHARED_LIBS=yes -D Python_FIND_FRAMEWORK=LAST -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 ../
        #cmake -DLAMMPS_EXCEPTIONS=yes \
        #      -DBUILD_SHARED_LIBS=yes \
        #      -DMLIAP_ENABLE_PYTHON=yes \
        #      -DPKG_PYTHON=yes \
        #      -DPKG_ML-SNAP=yes \
        #      -DPKG_ML-PACE=yes \
        #      -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 \
        #      -DPYTHON_EXECUTABLE:FILEPATH=`which python` ../
        #make -j 20
        #make install-python
        #cd ../../../FitSNAP
    - name: Test stubs with pytest
      run: |
        python -m pip install --upgrade pytest
        export PYTHONPATH=$(pwd):$PYTHONPATH
        cd tests
        pytest test_examples.py::test_stubs
    - name: Get mpi4py
      run: |
        python -m pip install --upgrade mpi4py
        # can also install mpi4py manually, but very buggy with conda:
        #cd $CONDA/lib/python*/site-packages/
        #ls 
        #curl -L https://bitbucket.org/mpi4py/mpi4py/downloads/mpi4py-3.1.3.tar.gz -o mpi4py-3.1.3.tar.gz
        #tar -xzvf mpi4py-3.1.3.tar.gz
        #cd mpi4py-3.1.3
        #python setup.py build
        #python setup.py install
    - name: Test basic executable examples
      run: |
        export PYTHONPATH=$(pwd):$PYTHONPATH
        cd tests
        python -m pytest -s test_examples.py::test_fitsnap_${{ matrix.test}}
    - name: Test nonlinear models
      run: |
        export PYTHONPATH=$(pwd):$PYTHONPATH
        cd tests
        python -m pytest -s test_pytorch.py::test_fd_single_elem
        python -m pytest -s test_pytorch.py::test_fd_multi_elem
        python -m pytest -s test_pytorch.py::test_fd_ace_single_elem


